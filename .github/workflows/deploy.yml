name:  CI/CD

on:
  push:
    branches: [ main ]

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    # Terraform setup
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Terraform Init and Apply
      working-directory: terraform
      run: |
        terraform init
        terraform apply -auto-approve
        terraform output -raw public_ip > ../ansible/ec2_ip.txt

    # Install Ansible
    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

    # Provision server with Ansible
    - name: Provision EC2 with Ansible
      run: |
        
        mkdir -p ansible

        
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ansible/id_rsa
        chmod 400 ansible/id_rsa

       
        ls -la ansible/id_rsa

        
        EC2_IP=$(cat ansible/ec2_ip.txt)
        echo "EC2 IP: $EC2_IP"
        echo "Waiting 60 seconds for instance to be fully ready..."

        
        echo "[all]" > ansible/hosts
        echo "$EC2_IP ansible_user=ubuntu ansible_ssh_private_key_file=./ansible/id_rsa ansible_python_interpreter=/usr/bin/python3 ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> ansible/hosts
        cat ansible/hosts

        
        echo "[defaults]" > ansible/ansible.cfg
        echo "host_key_checking = False" >> ansible/ansible.cfg

        
        ssh -i ansible/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP "echo 'SSH connection successful'" || echo "SSH connection failed but continuing"

        
        ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/hosts ansible/playbook.yml -vvv


    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        pytest

    # Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/customer-order-api:latest

    - name: Deploy to EC2
      run: |
        EC2_IP=$(cat ansible/ec2_ip.txt)
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
        chmod 400 key.pem

        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_IP << EOF
          docker pull ${{ secrets.DOCKER_USERNAME }}/customer-order-api:latest
           # Create directory 
          mkdir -p /home/ubuntu/customer_order_management
      
          # Change  directory
          cd /home/ubuntu/customer_order_management
        
          # Initialize git repo 
          if [ ! -d .git ]; then
            git init
            git config --global --add safe.directory /home/ubuntu/customer_order_management
            git remote add origin https://github.com/geekigen/customer_order_management.git || true
          fi
      
          # Pull 
          git fetch --all
          git reset --hard origin/main
        
          docker-compose down
          docker-compose up -d --build
        EOF