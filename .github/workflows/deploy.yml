name: Django CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
          python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/customer-order-api:latest

    - name: Deploy on EC2 via SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        
        cat << 'EOF' > key.pem
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        
        chmod 400 key.pem
        
        echo "Key file permissions and size:"
        ls -l key.pem
        echo "First line of key.pem:"
        head -n 1 key.pem
        echo "Last line of key.pem:"
        tail -n 1 key.pem
        echo "Line count of key.pem:"
        wc -l key.pem
        
        echo "Testing key validity:"
        ssh-keygen -y -P "" -f key.pem > /dev/null && echo "Key is valid" || echo "Key is invalid"
        
        echo "Testing SSH connection:"
        ssh -o StrictHostKeyChecking=no -i key.pem -vvv ${EC2_USER}@${EC2_HOST} 'whoami' || true
        
        echo "Deploying to EC2..."
        ssh -o StrictHostKeyChecking=no -i key.pem ${EC2_USER}@${EC2_HOST} << EOSSH
          docker pull ${DOCKER_USERNAME}/customer-order-api:latest
          cd /home/ubuntu/customer_order_management
          git pull origin main 
          docker-compose down
          docker-compose up -d --build
        EOSSH