name: Django CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
          python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

#    - name: Run tests
#      run: |
#        coverage run manage.py test
#        coverage report
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/customer-order-api:latest

    - name: Deploy on EC2 via SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        # Write SSH private key to file using a heredoc to preserve newlines
        cat << 'EOF' > key.pem
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        
        # Set correct permissions
        chmod 400 key.pem
        
        # Debug: Inspect the key file
        echo "Key file permissions and size:"
        ls -l key.pem
        echo "First line of key.pem:"
        head -n 1 key.pem
        echo "Last line of key.pem:"
        tail -n 1 key.pem
        echo "Line count of key.pem:"
        wc -l key.pem
        
        # Test key validity with ssh-keygen
        echo "Testing key validity:"
        ssh-keygen -y -P "" -f key.pem > /dev/null && echo "Key is valid" || echo "Key is invalid"
        
        # Test SSH connection with verbose output
        echo "Testing SSH connection:"
        ssh -o StrictHostKeyChecking=no -i key.pem -vvv ${EC2_USER}@${EC2_HOST} 'whoami' || true
        
        # Deploy to EC2
        echo "Deploying to EC2..."
        ssh -o StrictHostKeyChecking=no -i key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
          docker pull ${DOCKER_USERNAME}/customer-order-api:latest
          cd ~/customer_order
          docker-compose down
          docker-compose up -d --build
        EOF